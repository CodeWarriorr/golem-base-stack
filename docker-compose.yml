
services:
  db-init:
    image: postgres:17
    volumes:
      - blockscout-db-data:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  db:
    image: postgres:17
    user: 2000:2000
    shm_size: 256m
    restart: always
    container_name: 'db'
    command: postgres -c 'max_connections=200' -c 'client_connection_check_interval=60000'
    environment:
      POSTGRES_DB: 'blockscout'
      POSTGRES_USER: 'blockscout'
      POSTGRES_PASSWORD: 'ceWb1MeLBEeOIfk65gU8EjF8'
    ports:
      - target: 5432
        published: 7432
    volumes:
      - blockscout-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blockscout -d blockscout"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-db:
    image: 'redis:alpine'
    container_name: redis-db
    command: redis-server
    volumes:
      - redis-data:/data

  backend:
    build:
      context: ./blockscout
      dockerfile: docker/Dockerfile
      args:
        RELEASE_VERSION: 8.1.1
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: 'backend'
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health/readiness"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  ./envs/backend.env
    volumes:
      - backend-logs:/app/logs/
      - backend-dets:/app/dets/
    depends_on:
      - db
      - redis-db
    links:
      - db:database
    ports:
      - 4000:4000
    profiles:
      - backend

  frontend:
    build:
      context: ./blockscout-frontend
      dockerfile: Dockerfile
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'frontend'
    env_file:
      -  ./envs/frontend.env
    ports:
      - 3000:3000
    profiles:
      - frontend
  
  golem-base-indexer:
    build:
      context: ./blockscout-rs-neti/golem-base-indexer
      dockerfile: Dockerfile
    restart: always
    container_name: 'golem-base-indexer'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    env_file:
      - ./envs/golem-base-indexer.env
    volumes:
      - golem-base-indexer:/app/data/
    links:
      - db
    depends_on:
      - db
    profiles:
      - services
    ports:
      - 8050:8050

volumes:
  blockscout-db-data:
  backend-logs:
  backend-dets:
  redis-data:
  golem-base-indexer:
